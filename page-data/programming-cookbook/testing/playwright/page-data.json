{"componentChunkName":"component---src-templates-docs-js","path":"/programming-cookbook/testing/playwright","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"f73fa570-9c86-5c89-99d4-d1cf913141c4","title":"Playwright","slug":"/programming-cookbook/testing/playwright"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Playwright\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"\\uD83C\\uDFAD Playwright Node.js\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"How to setup and use Playwright (minimum setup)\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Creating Node.js project\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Node.js\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Yarn\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new empty folder.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"mkdir playwright-getting-started\\ncd playwright-getting-started\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new Node.js project with a default configuration.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"yarn init -y\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install required Node packages. We will use TypeScript and ts-jest in this project.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"yarn add -D \\\\\\n  @types/jest \\\\\\n  add \\\\\\n  jest \\\\\\n  playwright \\\\\\n  ts-jest \\\\\\n  typescript \\\\\\n\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open package.json with your favorite text editor and you will find the content like this.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"name\\\": \\\"playwright-getting-started\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"devDependencies\\\": {\\n    \\\"@types/jest\\\": \\\"^26.0.22\\\",\\n    \\\"jest\\\": \\\"^26.6.3\\\",\\n    \\\"playwright\\\": \\\"^1.10.0\\\",\\n    \\\"ts-jest\\\": \\\"^26.5.4\\\",\\n    \\\"typescript\\\": \\\"^4.2.3\\\"\\n  }\\n}\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Please be informed that you may get a newer version of this packages.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Configure Jest\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jest.config.js\"), \" at root of your project and configure to use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ts-jest\"), \" preset.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// jest.config.js\\nmodule.exports = {\\n  preset: 'ts-jest',\\n  testEnvironment: 'node',\\n};\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Writing your first test case\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create folder \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/__tests__\"), \" and add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"homepage.test.ts\"), \" in it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add test content to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"homepage.test.ts\"), \" as the following code:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { webkit } from 'playwright';\\n\\n// Uppercase name for a test suite\\ndescribe('Homepage', () => {\\n\\n  // Lowercase name for a test case\\n  test('should launch homepage with expected title', async () => {\\n    const browser = await webkit.launch();\\n    const context = await browser.newContext();\\n\\n    const page = await context.newPage();\\n    await page.goto('https://todomvc.com');\\n\\n    const pageTitle = await page.title();\\n    expect(pageTitle).toBe('TodoMVC');\\n    await browser.close();\\n  });\\n});\\n\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This test will launch \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http://todomvc.com\"), \" with Webkit (Safari engine).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Verify if page's title matches TodoMVC.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By default Playwright will launch in headless mode so you won't see UI of a browser.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can make Playwright launch your browser by use this option \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"webkit.launch({ headless: false })\"), \".\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Adding custom script to your package.json\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add a custom script with the following content to to your package.json\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"jest\\\"\\n  },\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Then you will find you latest package.json will look like this.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"name\\\": \\\"playwright-getting-started\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"jest\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/jest\\\": \\\"^26.0.22\\\",\\n    \\\"jest\\\": \\\"^26.6.3\\\",\\n    \\\"playwright\\\": \\\"^1.10.0\\\",\\n    \\\"ts-jest\\\": \\\"^26.5.4\\\",\\n    \\\"typescript\\\": \\\"^4.2.3\\\"\\n  }\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Checking the project file structure\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here is the file structure in our project.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"playwright-getting-started/\\n\\u251C\\u2500\\u2500 node_modules\\n\\u251C\\u2500\\u2500 src/__tests__/homepage.test.ts\\n\\u251C\\u2500\\u2500 jest.config.js\\n\\u251C\\u2500\\u2500 package.json\\n\\u2514\\u2500\\u2500 yarn.lock\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Running our test case.\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In terminal at root level of the project, run the following command.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ yarn test\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Then you will find pass result in a console.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"yarn run v1.22.5\\n$ jest\\n PASS  src/__tests__/homepage.test.ts (6.782 s)\\n  Homepage\\n    \\u221A should launch homepage with expected title (4101 ms)\\n\\nTest Suites: 1 passed, 1 total\\nTests:       1 passed, 1 total\\nSnapshots:   0 total\\nTime:        6.878 s, estimated 7 s\\nRan all test suites.\\nDone in 8.15s.\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Note\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This code should work cross platform, Windows, Mac, Linux\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I tested this code on Windows and it works well for built-in Webkit that is bundled with Playwright.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the code does not work on your computer, please configure the code to use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chromiume\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"firefox\"), \".\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#-playwright-nodejs","title":"🎭 Playwright Node.js"},{"url":"#how-to-setup-and-use-playwright-minimum-setup","title":"How to setup and use Playwright (minimum setup)","items":[{"url":"#creating-nodejs-project","title":"Creating Node.js project"},{"url":"#configure-jest","title":"Configure Jest"},{"url":"#writing-your-first-test-case","title":"Writing your first test case"},{"url":"#adding-custom-script-to-your-packagejson","title":"Adding custom script to your package.json"},{"url":"#checking-the-project-file-structure","title":"Checking the project file structure"},{"url":"#running-our-test-case","title":"Running our test case."},{"url":"#note","title":"Note"}]}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"programming-cookbook/testing/playwright.md","fields":{"gitLogLatestAuthorName":"aaronamm","gitLogLatestAuthorEmail":"theeranitp@gmail.com","gitLogLatestDate":"16 minutes ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"dc541af23f25e8785f3cc5c8d5f5996e1c0e8090","date":"2021-04-17 05:56"}},"pageContext":{"id":"f73fa570-9c86-5c89-99d4-d1cf913141c4"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}